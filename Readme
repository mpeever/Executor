When I worked at Pacific Lutheran University, the center of the IdM system was a pair of AlphaServers running Tru64 Unix and several thousand (perhaps hundreds of thousands) lines of Perl code.

Unfortunately, some of our Perl-based tasks were VERY slow, mainly because they had to make HTTP(S) calls to external vendors.

The obvious solution was to parallelize those tasks, but we were working in non-threaded Perl. So I wrote an "Executor" that would [loosely] imitate a Java ExecutorService as far as the API was concerned. Of course it wasn't as feature rich as the Java version, partly because it was faking out Java Threads with Unix processes. But it worked well and solved the business problem.

I no longer have that code: it was more than ten years ago!

This is a reimplementation of that concept. I've included unit tests, but no load tests. I've also modernized the Perl quite a bit, using Try::Tiny to catch Errors and Moose to handle object-oriented details. As I recall, the original wasn't much longer than this, but had fewer features.

-mark